{
	"compiler": {
		"version": "0.8.23+commit.f704f362"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "wormhole",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenBridge",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "consistencyLevel",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "pythAddress",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "oracleMode",
						"type": "uint8"
					},
					{
						"internalType": "uint64",
						"name": "priceStandardDeviations",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "priceStandardDeviationsPrecision",
						"type": "uint64"
					},
					{
						"internalType": "uint256",
						"name": "maxLiquidationBonus",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxLiquidationPortion",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxLiquidationPortionPrecision",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestAccrualIndexPrecision",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "collateralizationRatioPrecision",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "AddressInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedInnerCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "encodedMessage",
						"type": "bytes"
					}
				],
				"name": "completeBorrow",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "encodedMessage",
						"type": "bytes"
					}
				],
				"name": "completeDeposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "encodedMessage",
						"type": "bytes"
					}
				],
				"name": "completeRepay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "encodedMessage",
						"type": "bytes"
					}
				],
				"name": "completeWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "normalizedAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestAccrualIndex",
						"type": "uint256"
					},
					{
						"internalType": "enum HubSpokeStructs.Round",
						"name": "round",
						"type": "uint8"
					}
				],
				"name": "denormalizeAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "assetAddress",
						"type": "address"
					}
				],
				"name": "getAssetInfo",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "collateralizationRatioDeposit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "collateralizationRatioBorrow",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "pythId",
								"type": "bytes32"
							},
							{
								"internalType": "uint8",
								"name": "decimals",
								"type": "uint8"
							},
							{
								"components": [
									{
										"internalType": "uint64",
										"name": "ratePrecision",
										"type": "uint64"
									},
									{
										"internalType": "uint256[]",
										"name": "kinks",
										"type": "uint256[]"
									},
									{
										"internalType": "uint256[]",
										"name": "rates",
										"type": "uint256[]"
									},
									{
										"internalType": "uint256",
										"name": "reserveFactor",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "reservePrecision",
										"type": "uint256"
									}
								],
								"internalType": "struct HubSpokeStructs.PiecewiseInterestRateModel",
								"name": "interestRateModel",
								"type": "tuple"
							},
							{
								"internalType": "bool",
								"name": "exists",
								"type": "bool"
							}
						],
						"internalType": "struct HubSpokeStructs.AssetInfo",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "assetAddress",
						"type": "address"
					}
				],
				"name": "getGlobalBalance",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "deposited",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "borrowed",
								"type": "uint256"
							}
						],
						"internalType": "struct HubSpokeStructs.VaultAmount",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getInterestAccrualIndexPrecision",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "assetAddress",
						"type": "address"
					}
				],
				"name": "getInterestAccrualIndices",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "deposited",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "borrowed",
								"type": "uint256"
							}
						],
						"internalType": "struct HubSpokeStructs.AccrualIndices",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "vaultOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "assetAddress",
						"type": "address"
					}
				],
				"name": "getUserBalance",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "deposited",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "borrowed",
								"type": "uint256"
							}
						],
						"internalType": "struct HubSpokeStructs.VaultAmount",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "vault",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "assetRepayAddresses",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "assetRepayAmounts",
						"type": "uint256[]"
					},
					{
						"internalType": "address[]",
						"name": "assetReceiptAddresses",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "assetReceiptAmounts",
						"type": "uint256[]"
					}
				],
				"name": "liquidation",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "denormalizedAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestAccrualIndex",
						"type": "uint256"
					},
					{
						"internalType": "enum HubSpokeStructs.Round",
						"name": "round",
						"type": "uint8"
					}
				],
				"name": "normalizeAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "assetAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "collateralizationRatioDeposit",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "collateralizationRatioBorrow",
						"type": "uint256"
					},
					{
						"internalType": "uint64",
						"name": "ratePrecision",
						"type": "uint64"
					},
					{
						"internalType": "uint256[]",
						"name": "kinks",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "rates",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "reserveFactor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reservePrecision",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "pythId",
						"type": "bytes32"
					}
				],
				"name": "registerAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "chainId",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "spokeContractAddress",
						"type": "address"
					}
				],
				"name": "registerSpoke",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					},
					{
						"internalType": "int64",
						"name": "price",
						"type": "int64"
					},
					{
						"internalType": "uint64",
						"name": "conf",
						"type": "uint64"
					},
					{
						"internalType": "int32",
						"name": "expo",
						"type": "int32"
					},
					{
						"internalType": "int64",
						"name": "emaPrice",
						"type": "int64"
					},
					{
						"internalType": "uint64",
						"name": "emaConf",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "publishTime",
						"type": "uint64"
					}
				],
				"name": "setMockPythFeed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "oracleId",
						"type": "bytes32"
					},
					{
						"components": [
							{
								"internalType": "int64",
								"name": "price",
								"type": "int64"
							},
							{
								"internalType": "uint64",
								"name": "conf",
								"type": "uint64"
							},
							{
								"internalType": "int32",
								"name": "expo",
								"type": "int32"
							},
							{
								"internalType": "uint256",
								"name": "publishTime",
								"type": "uint256"
							}
						],
						"internalType": "struct HubSpokeStructs.Price",
						"name": "price",
						"type": "tuple"
					}
				],
				"name": "setOraclePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"AddressInsufficientBalance(address)": [
					{
						"details": "The ETH balance of the account is not enough to perform the operation."
					}
				],
				"FailedInnerCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC20 token failed."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"denormalizeAmount(uint256,uint256,uint8)": {
					"params": {
						"interestAccrualIndex": "- The amount of interest that has accrued, multiplied by getInterestAccrualIndexPrecision().",
						"normalizedAmount": "- The normalized amount of an asset"
					},
					"returns": {
						"_0": "{uint256} The true amount of the asset"
					}
				},
				"getGlobalBalance(address)": {
					"params": {
						"assetAddress": "- the address of the asset"
					},
					"returns": {
						"_0": "a struct with 'deposited' field and 'borrowed' field for the amount deposited and borrowed of the asset multiplied by 10^decimal for that asset. Values are denormalized."
					}
				},
				"getUserBalance(address,address)": {
					"params": {
						"assetAddress": "- the address of the asset",
						"vaultOwner": "- the address of the user"
					},
					"returns": {
						"_0": "a struct with 'deposited' field and 'borrowed' field for the amount deposited and borrowed of the asset multiplied by 10^decimal for that asset. Values are denormalized."
					}
				},
				"normalizeAmount(uint256,uint256,uint8)": {
					"params": {
						"denormalizedAmount": "- The true amount of an asset",
						"interestAccrualIndex": "- The amount of interest that has accrued, multiplied by getInterestAccrualIndexPrecision(). So, (interestAccrualIndex/interestAccrualIndexPrecision) represents the interest accrued (this is initialized to 1 at the start of the protocol)"
					},
					"returns": {
						"_0": "{uint256} The normalized amount of the asset"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"denormalizeAmount(uint256,uint256,uint8)": {
					"notice": "Similar to 'normalizeAmount', takes a normalized value (amount of an asset) and denormalizes it."
				},
				"getGlobalBalance(address)": {
					"notice": "Get the protocol's global balance in an asset"
				},
				"getUserBalance(address,address)": {
					"notice": "Get a user's account balance in an asset"
				},
				"normalizeAmount(uint256,uint256,uint8)": {
					"notice": "Assets accrue interest over time, so at any given point in time the value of an asset is (amount of asset on day 1) * (the amount of interest that has accrued)."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"example-2/evm/src/contracts/lendingHub/Hub.sol": "Hub"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3",
			"license": "MIT",
			"urls": [
				"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867",
				"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY"
			]
		},
		"@pythnetwork/pyth-sdk-solidity/AbstractPyth.sol": {
			"keccak256": "0x928ee08b716ee1d45e463224da886a411f9d9677e75c621079c1c1fb58f17b70",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://c9aea1027d4fe2907186310d49fb3ff4cd5ef64aef0ff33fc61ccb4d99dd655a",
				"dweb:/ipfs/QmZZMrCrJLGDHsysKBZtFcHM4wN2TzVASyUyB9ZjGbFZKn"
			]
		},
		"@pythnetwork/pyth-sdk-solidity/IPyth.sol": {
			"keccak256": "0x9267fcf4f641a180c57cec08d5a50512430e218918643db94a8d8ef99ec60ed0",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://5ba1b051e412fc917323116a712792025d3bdf0aa76fbf7218ef98b605eabf46",
				"dweb:/ipfs/QmX4tJMartPLy6gEDWYnKoJZMWLcGpw9HUVfbwXPHTaTaP"
			]
		},
		"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol": {
			"keccak256": "0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://b75be4c3643b22305995aba71fc92146dbf51fa82d2f9728c515d7749b32dca3",
				"dweb:/ipfs/QmRby4XA9jJQGhxoJ16BTUDuU7BzLFfadbfTgBiQsDgNyZ"
			]
		},
		"@pythnetwork/pyth-sdk-solidity/MockPyth.sol": {
			"keccak256": "0xab091aaa2551201b37fe6f417db60b76e37caa540b0b82ad5df93721c8641412",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://9d3be6b795dfd0bcda4d6f52f876e8d5f8f9dbdc98be3a5ebd7aec057fa51959",
				"dweb:/ipfs/QmXarJpfPzjPLSakDzqqPJ7rHdqpu4J17PadmzZkB6hnWU"
			]
		},
		"@pythnetwork/pyth-sdk-solidity/PythErrors.sol": {
			"keccak256": "0xcd288c1da7de4223e6ecb36335385c5e7bfcbac0def035d8d9253db62b703112",
			"license": "Apache 2",
			"urls": [
				"bzz-raw://030a179c0ba04e71bf48d8d75acd180fb769d448776ec5fdbd32ed2b381dc7d3",
				"dweb:/ipfs/QmWZALnKedi6Jq8evBxVJMeY4XMrSQUpihJ2MoSGLZSnEA"
			]
		},
		"@pythnetwork/pyth-sdk-solidity/PythStructs.sol": {
			"keccak256": "0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a404dbbc64183995326c345cae27601d37c783b3d9030c8dc0ab4943fa2bf1da",
				"dweb:/ipfs/QmfNFesQffYisafmJFbKHxVFSD8fY49X1z9f8N7qtfW8AX"
			]
		},
		"example-2/evm/src/contracts/HubSpokeMessages.sol": {
			"keccak256": "0xbd7eddd402e84ececac48891645f176cd5c7c1e900ea6c10535d79f5df711dfd",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://b9f854584331c92ceedab8a9164a2d57ebde3aabbf081fd82c2862bddb978bf2",
				"dweb:/ipfs/QmTnJyxqnSq7n9o2FgGfV1RecQ2HTW8vJfPcCS9Qwig1No"
			]
		},
		"example-2/evm/src/contracts/HubSpokeStructs.sol": {
			"keccak256": "0x24302b1f2d165f5b53d3bedd11aa1c367d30458bb93e0a34a79a939e753fd7dc",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://11d40dd261195ea6fe19f0aa56d2aad5040cabd000041b250d3419985e9d6a9e",
				"dweb:/ipfs/Qmd59wjnwsyt2ave7vYQZQdPxk2AGHAvWVhQAUGAgxPMJ6"
			]
		},
		"example-2/evm/src/contracts/lendingHub/Hub.sol": {
			"keccak256": "0x475e57543326c1a2a367d47374e2d121ed76763c8dd1e5b507c1c063191c330e",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://57ebb755fadae4b37849ccbd3ceb854348444c82d086443984f68a644bce68d3",
				"dweb:/ipfs/Qme8Hye23YVa2sFUDUyXQKF2J1roDJEvxDvu8FFYUEwTRV"
			]
		},
		"example-2/evm/src/contracts/lendingHub/HubChecks.sol": {
			"keccak256": "0x09b5e60afb5f1181c7d812f6cf72d3b470557bc7defafba54831caeb88f763a9",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://ca97ca668805c6eb3c10f39814ad24c6908d1fe8e3d8604c6c6bc2e109a2def2",
				"dweb:/ipfs/QmToxroKs3k4HciDiop7aGvmvVtptQKrLUQszaNrZPWwrk"
			]
		},
		"example-2/evm/src/contracts/lendingHub/HubGetters.sol": {
			"keccak256": "0xdc95ad283ad88a59d02e8e9b431c8ab6722f09a993381a8f9e357b6ad5c6317d",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://83da2acc7f1b72011ab9dad097d983e71719f4c6129648cf5a363688d73ac3ad",
				"dweb:/ipfs/QmVGHyaUhxRq8ZP4kqUxrrsnXe8bHN3AgGMysjQ8QiQnqE"
			]
		},
		"example-2/evm/src/contracts/lendingHub/HubInterestUtilities.sol": {
			"keccak256": "0x6e6c9bcca3bfadf2d20c0bfe3a9ffd6e3be0c736c3f4d4400f3565356dcc1f49",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://86cf380511a380b4f65670aae0e63af2b679702847d97233a6d9f1134e28a621",
				"dweb:/ipfs/QmUKZ3DGwbEkmQUYUv4HFsikEGMEaDmZdSXhG5Qr85U4aJ"
			]
		},
		"example-2/evm/src/contracts/lendingHub/HubPriceUtilities.sol": {
			"keccak256": "0x31b71ac2252144476192dde7e887423362b91d26e6f8cdc2b9e70f64d4d20487",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://74d5b9ec2e2ad385c25151d4c4f94e9ee499c7941573a1b238f7f2cdc85ee1be",
				"dweb:/ipfs/QmPFXWLofh7JrNKjG7o6PjtgqCfkFy4GSJEjU2UBnxyAiZ"
			]
		},
		"example-2/evm/src/contracts/lendingHub/HubSetters.sol": {
			"keccak256": "0x0bd60015c7c1fe93867f6dcab478918706ded8db12c96a4b836f6769c3f53161",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://3a4b5155b0e10cb3dd9e56540e65d64f23e5d3af60594bda9446133fef684f0c",
				"dweb:/ipfs/QmaAHQLZPtJEyZrxYJsSM5RTuTYkFfPGLMBZcGMvCXzmYH"
			]
		},
		"example-2/evm/src/contracts/lendingHub/HubState.sol": {
			"keccak256": "0x7602f864c543570c2c21b42d1f027ae977ee9a36432c689e332dd9b424be68a9",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://70d64ac181a3ebe79f6182f9623f14d8c29922e2f7fdecef5ffd83a4d178cb1b",
				"dweb:/ipfs/QmQ2Rn5SYHczEA6j23Lx9XGF7RVKMndJGAFZcUXN7Y8SNU"
			]
		},
		"example-2/evm/src/contracts/lendingHub/HubWormholeUtilities.sol": {
			"keccak256": "0x9c8e82d53a6601718263ad8f5b34e524180019aa724b59586546b5bb6b08df7a",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://6cb39efbf97c6bcd349b37c101b6574784c2c76efd70f7e46956e82b8b925767",
				"dweb:/ipfs/QmcZJhZJ5bppTowsMPfoMLbifAy3HyM2PEpi17y9MaCcc1"
			]
		},
		"example-2/evm/src/interfaces/IMockPyth.sol": {
			"keccak256": "0xbd37338655f3e255f6ebd691549a27053a15cbdd9de4406cf538a197e3638131",
			"license": "Apache 2",
			"urls": [
				"bzz-raw://f7689621f9031bc01731ab49f8bdae82f95a66245b2b2bfb4b7256272e36b0ad",
				"dweb:/ipfs/QmNXaxmbwNKtvajgDnsk1Fmg2NZW4ML4k33pTPaGXP9h8Y"
			]
		},
		"example-2/evm/src/interfaces/ITokenBridge.sol": {
			"keccak256": "0x4c464b3e06d31406bd5c777cf8cc985a2f61ce363b6b8f1471c6b5c5da85bf17",
			"license": "Apache 2",
			"urls": [
				"bzz-raw://acb5d5fc309b2cb1db62e1a8b9b3a1cb30b66f6b92b39477beb7a6bc61e0a4ae",
				"dweb:/ipfs/QmakrPQL2o7uVBYenB4wf1rth1JwKRoo7rJdXx7EPKczva"
			]
		},
		"example-2/evm/src/interfaces/IWETH.sol": {
			"keccak256": "0xecabfd3b5626aaac6da21213b966a2aac8380f4fec739f84ffe08b29006d134e",
			"license": "Apache 2",
			"urls": [
				"bzz-raw://912a0accde3c2d18f8d268726ec16b9dfa0f24522e66e7d88c9ed368f3db7d60",
				"dweb:/ipfs/Qmf2V8YhAXRSYVFKuCeCViYAnnWtPi9GTL7w4zRPtMvGTT"
			]
		},
		"example-2/evm/src/interfaces/IWormhole.sol": {
			"keccak256": "0x8547d11f760ad248fe6620e146ed7756654f26b769f9deebdbb84d534144e216",
			"license": "Apache 2",
			"urls": [
				"bzz-raw://5ac7aae1f4c9fbf06056856e854ba7ab14a5c7a487618f0a5a752e25d8d36563",
				"dweb:/ipfs/QmNf2aFrp4tgEGd1AvaSJTMHb72RVgw1TBfvNp5tQ2TZH8"
			]
		},
		"example-2/evm/src/libraries/external/BytesLib.sol": {
			"keccak256": "0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014",
				"dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn"
			]
		},
		"forge-std/console.sol": {
			"keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
			"license": "MIT",
			"urls": [
				"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
				"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
			]
		}
	},
	"version": 1
}